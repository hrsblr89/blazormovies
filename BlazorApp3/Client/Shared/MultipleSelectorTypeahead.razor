@typeparam T

<CustomTypeAhead SearchMethod="@((string searchText) => SearchMethod(searchText))"
                 ValueChanged="@((T item)=>SelectedElement(item))">
    <ResultTemplate>
        @MyResultTemplage(context)
    </ResultTemplate>
</CustomTypeAhead>

<ul class="list-group">
    @foreach(var item in SelectedElements)
    {
        <li draggable="true"
            @ondragstart="@(() => HandleDragStart(item))"
            @ondragend="@(() => HandleDragOver(item))">
            @MyListTemplate
            <span @onclick="@(() => SelectedElements.Remove(item))">X</span>
        </li>
    }
</ul>

@code {
    [Parameter] public List<T> SelectedElements { get; set; }
    [Parameter] public Func<string, Task<IEnumerable<T>>> SearchMethod { get; set; }
    [Parameter] public RenderFragment<T> MyResultTemplage { get; set; }
    [Parameter] public RenderFragment<T> MyListTemplate { get; set; }


    T draggedItem;

    private void SelectedElement(T item)
    {
        if(!SelectedElements.Any(x => x.Equals(item)))
        {
            SelectedElements.Add(item);
        }
    }

    private void HandleDragStart(T Item)
    {
        draggedItem = Item;

    }


    private void HandleDragOver(T Item)
    {
        if (!Item.Equals(draggedItem))
        {
            var dragElementIndex = SelectedElements.IndexOf(draggedItem);
            var elementIndex = SelectedElements.IndexOf(Item);
            SelectedElements[elementIndex] = draggedItem;
            SelectedElements[dragElementIndex] = Item;
        }
    }
}
